EXERCÍCIO 1 
Explique brevemente a função de cada camada em uma arquitetura orientada a serviços:
a) Camada de Apresentação (Controller):
b) Camada de Serviço (Service):
c) Camada de Repositório (Repository):
d) Camada de Modelo (Entity/Domain):

EXERCÍCIO 2 
Analise as afirmativas sobre arquitetura em camadas:
(   ) A camada de apresentação deve conter regras de negócio complexas
(   ) É uma boa prática que a camada de serviço acesse diretamente o banco de dados
(   ) A camada de repositório deve ser responsável apenas pelo acesso a dados
(   ) O controller deve chamar diretamente métodos do repositório
(   ) A camada de serviço orquestra a lógica de negócio da aplicação

EXERCÍCIO 3
Liste 5 boas práticas para documentação de APIs utilizando OpenAPI/Swagger:
1. 
2. 
3. 
4. 
5. 

EXERCÍCIO 4 
Defina os seguintes conceitos e dê um exemplo prático de cada:
a) Coesão:
   Definição: 
   Exemplo: 

b) Acoplamento:
   Definição: 
   Exemplo: 

c) Encapsulamento:
   Definição: 
   Exemplo: 

d) Abstração:
   Definição: 
   Exemplo: 

EXERCÍCIO 5 
Reescreva o código abaixo utilizando Optional para evitar NullPointerException:

Código original:
```java
public String buscarNomeUsuario(Long id) {
    Usuario usuario = usuarioRepository.findById(id);
    if (usuario != null) {
        return usuario.getNome();
    }
    return "Usuário não encontrado";
}
```

Código com Optional:


EXERCÍCIO 6 - JPA E GERAÇÃO DE IDs
a) Explique o que é GenerationType.IDENTITY:

b) Cite 2 limitações desta estratégia em cenários de alta concorrência:
1. 
2. 

c) Qual alternativa você sugeriria para resolver essas limitações?

EXERCÍCIO 7 
Liste 5 benefícios que a separação em camadas traz para uma aplicação:
1. 
2. 
3. 
4. 
5. 

EXERCÍCIO 8  
a) O que são DTOs e qual sua finalidade?

b) Por que não é recomendado expor entidades de banco diretamente na camada de apresentação?

c) Cite 2 ferramentas que auxiliam no mapeamento entre DTOs e entidades:
1. 
2. 

EXERCÍCIO 9 
a) Explique o que são mocks e qual sua importância nos testes:

b) Por que é importante usar interfaces/abstrações para facilitar os testes?

c) Escreva oque seria um simples de um teste unitário usando mock para testar um serviço:



EXERCÍCIO 10 - 
Explique os seguintes conceitos relacionados a persistência:

a) Paginação:
   Quando usar: 
   Como implementar: 

b) Batch Insert:
   Vantagens: 
   Quando usar: 

c) Transação:
   Propriedades ACID: 
   Exemplo de uso: 

EXERCÍCIO 11 - 
Você foi contratado para desenvolver um sistema de e-commerce. Descreva como você organizaria as seguintes funcionalidades seguindo a arquitetura em camadas:

a) Cadastro de produto:
   - Controller:
   - Service:
   - Repository:

b) Busca de produtos com filtros e paginação:
   - Controller:
   - Service:
   - Repository:

EXERCÍCIO 12 -
Analise o código abaixo e identifique os problemas relacionados à arquitetura em camadas:

```java
@RestController
public class ProdutoController {
    
    @Autowired
    private ProdutoRepository produtoRepository;
    
    @PostMapping("/produtos")
    public ResponseEntity<Produto> criarProduto(@RequestBody Produto produto) {
        
        if (produto.getPreco() < 0) {
            throw new IllegalArgumentException("Preço não pode ser negativo");
        }
        
        
        Produto produtoSalvo = produtoRepository.save(produto);
        return ResponseEntity.ok(produtoSalvo);
    }
}
```

Problemas identificados:
1. 
2. 
3. 

Como corrigir:

EXERCÍCIO 13 - 
Pesquise e explique como os seguintes padrões se relacionam com arquitetura em camadas:

a) Repository Pattern:

b) Service Layer Pattern:

c) DTO Pattern:

EXERCÍCIO 14
1. Por que é importante manter baixo acoplamento entre as camadas?

2. Como a arquitetura em camadas facilita a manutenção de uma aplicação?

3. Qual o impacto da falta de separação adequada entre as camadas?

4. Como você explicaria para um desenvolvedor iniciante a importância de não misturar responsabilidades entre as camadas?

